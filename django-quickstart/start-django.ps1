param(
   [Parameter(Position=0, Mandatory=$true)] [String]$ProjectDir,
   [Parameter(Position=1, Mandatory=$true)] [String]$Project
)

$ShipDir = Join-Path -Path $ProjectDir -ChildPath 'ship'
$SrcDir = Join-Path -Path $ProjectDir -ChildPath "src"

$Dockerfile = '
FROM ubuntu:xenial
# Install packages
RUN apt-get update && apt-get install -y \
python3 \
python3-django \
python3-psycopg2 \
dos2unix
RUN mkdir -p /srv/ship && mkdir -p /srv/src
ADD ship/* /srv/ship/
RUN chmod +x /srv/ship/docker-entrypoint.sh
# 8000 = Gunicorn
EXPOSE 8000
#convert windows newlines
RUN for file in $(find /srv/ -type f) ; do perl -pi -e "s/\r\n/\n/g" $file; done 
WORKDIR /srv/ship
ENTRYPOINT ["./docker-entrypoint.sh"]

'

$DockerCompose = '
version: "2.1"

services:
  postgres:
    user: postgres
    image: postgres
    environment:
      POSTGRES_PASSWORD: "###POSTGRES_PASSWORD###"
      POSTGRES_USER: django
      POSTGRES_DB: ###PROJECT###
    healthcheck:
      test: ["CMD", "psql", "###PROJECT###", "django", "-c", "\\l"]
      interval: 10s
      timeout: 5s
      retries: 5
  django:
    build: .
    image: dev/###PROJECT###
    volumes:
      - "./src:/srv/src"
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    links:
      - postgres

'

$DockerEntryPoint = '#!/bin/bash
echo "Starting Django"

if [ ! -d /srv/###PROJECT### ]
then
  echo "Creating Project..."
  mkdir -p /srv/src/###PROJECT###
  django-admin startproject ###PROJECT### /srv/src/###PROJECT### && \
  cp -rfv /srv/ship/settings.py /srv/src/###PROJECT###/###PROJECT###/ 
fi

cd /srv/src/###PROJECT###
python3 manage.py makemigrations           # Make database migrations
python3 manage.py migrate                  # Apply database migrations
python3 manage.py collectstatic --noinput  # Collect static files


# Start development server
echo "Starting development server on port 8000"
python3 manage.py runserver 0.0.0.0:8000            # Start development server

'

$SettingsFile = "
'''
Django settings for testproject project.

Generated by 'django-admin startproject' using Django 1.8.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
'''

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '###SECRET_KEY###'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = '###PROJECT###.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = '###PROJECT###.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': '###PROJECT###',
        'USER': 'django',
        'PASSWORD': '###POSTGRES_PASSWORD###',
        'HOST': 'postgres'
    }
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

BASE_DIR = (os.path.dirname(__file__))
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'


"
#ensure NetConnectionProfile for DockerNAT is set to Private, to make SMB-Shares available for mounting volumes into containers
get-netadapter *DockerNAT* | Get-NetConnectionProfile | Set-NetConnectionProfile -NetworkCategory Private

$POSTGRES_PASSWORD = ( -join ((0x30..0x39) + ( 0x41..0x5A) + ( 0x61..0x7A) | Get-Random -Count 16  | ForEach-Object {[char]$_}) )
New-Item -Path $ProjectDir -ItemType Directory -Force -Verbose | Out-Null
$ShipDir = New-Item -Path $ShipDir -ItemType Directory -Force -Verbose
$SrcDir = New-Item -Path $SrcDir -ItemType Directory -Force -Verbose

$SECRET_KEY = ( -join ((0x21..0x26) + (0x28..0x2c) + (0x30..0x39) + ( 0x41..0x5A) + ( 0x61..0x7A) | Get-Random -Count 128  | ForEach-Object {[char]$_}) )

$SettingsFile.Replace("###PROJECT###",$Project).Replace('###PROJECTDIR###',$ProjectDir).Replace('###SECRET_KEY###', $SECRET_KEY).Replace('###POSTGRES_PASSWORD###', $POSTGRES_PASSWORD) | Out-File -FilePath ($ShipDir.FullName + '\settings.py') -Encoding utf8 -Force -Verbose
$Dockerfile.Replace("###PROJECT###",$Project).Replace('###PROJECTDIR###',$ProjectDir) | Out-File -FilePath ($ProjectDir + '\Dockerfile') -Encoding utf8 -Force -Verbose
$DockerEntryPoint.Replace("###PROJECT###",$Project).Replace('###PROJECTDIR###',$ProjectDir) | Out-File -FilePath ($ShipDir.FullName + '\docker-entrypoint.sh') -Encoding ascii -Force -Verbose
$DockerCompose.Replace("###PROJECT###",$Project).Replace('###PROJECTDIR###',$ProjectDir).Replace('###POSTGRES_PASSWORD###', $POSTGRES_PASSWORD) | Out-File -FilePath ($ProjectDir + '\docker-compose.yml') -Encoding utf8 -Force -Verbose

